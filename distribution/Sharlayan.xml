<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sharlayan</name>
    </assembly>
    <members>
        <member name="M:Sharlayan.Core.ChatCleaner.#ctor(System.String)">
            <summary>
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:Sharlayan.Core.ChatCleaner.#ctor(System.Byte[])">
            <summary>
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:Sharlayan.Core.ChatCleaner.ProcessFullLine(System.Byte[])">
            <summary>
            </summary>
            <param name="bytes"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.Core.ChatCleaner.ProcessName(System.String)">
            <summary>
            </summary>
            <param name="cleaned"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.Helpers.StringHelper.TitleCase(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="s"> </param>
            <param name="all"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.Helpers.StringHelper.TrimAndCleanSpaces(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.Helpers.StringHelper.HexToString(System.String)">
            <summary>
            </summary>
            <param name="hexValue"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.Helpers.XmlHelper.SanitizeXmlString(System.String)">
            <summary>
            </summary>
            <param name="xValue"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.Helpers.XmlHelper.IsLegalXmlChar(System.Int32)">
            <summary>
            </summary>
            <param name="xChar"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.Peek(System.IntPtr,System.Byte[])">
            <summary>
            </summary>
            <param name="address"> </param>
            <param name="buffer"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetByte(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetByteArray(System.IntPtr,System.Int32)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetInt16(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetInt32(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetInt64(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetString(System.IntPtr,System.Int64,System.Int32)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetUInt16(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetUInt32(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetUInt64(System.IntPtr,System.Int64)">
            <summary>
            </summary>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetStructure``1(System.IntPtr,System.Int32)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="address"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.MemoryHandler.GetModuleByAddress(System.IntPtr)">
            <summary>
                Allows the user to find out what module an address is in.
            </summary>
            <param name="address">Int32 Address</param>
            <returns>ProcessModule</returns>
        </member>
        <member name="M:Sharlayan.Scanner.LoadOffsets(System.Collections.Generic.IEnumerable{Sharlayan.Models.Signature},System.Boolean)">
            <summary>
            </summary>
            <param name="pSignatures"> </param>
            <param name="scanAllMemoryRegions"></param>
        </member>
        <member name="M:Sharlayan.Scanner.SignatureToByte(System.String,System.Byte)">
            <summary>
                Convert a hex string to a binary array while preserving any wildcard characters.
            </summary>
            <param name="signature">A hex string "signature"</param>
            <param name="wildcard">The byte to treat as the wildcard</param>
            <returns>The converted binary array. Null if the conversion failed.</returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.OpenProcess(Sharlayan.UnsafeNativeMethods.ProcessAccessFlags,System.Boolean,System.UInt32)">
            <summary>
            </summary>
            <param name="dwDesiredAccess"></param>
            <param name="bInheritHandle"></param>
            <param name="dwProcessId"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.CloseHandle(System.IntPtr)">
            <summary>
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Byte[],System.IntPtr,System.IntPtr@)">
            <summary>
            </summary>
            <param name="processHandle"> </param>
            <param name="lpBaseAddress"> </param>
            <param name="lpBuffer"> </param>
            <param name="regionSize"> </param>
            <param name="lpNumberOfBytesRead"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            </summary>
            <param name="processHandle"> </param>
            <param name="lpBaseAddress"> </param>
            <param name="lpBuffer"> </param>
            <param name="regionSize"> </param>
            <param name="lpNumberOfBytesRead"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.ReadProcessMemory(System.IntPtr,System.IntPtr,System.Byte[],System.UInt32,System.IntPtr@)">
            <summary>
            </summary>
            <param name="processHandle"> </param>
            <param name="lpBaseAddress"> </param>
            <param name="lpBuffer"> </param>
            <param name="regionSize"> </param>
            <param name="lpNumberOfBytesRead"> </param>
            <returns> </returns>
        </member>
        <member name="M:Sharlayan.UnsafeNativeMethods.VirtualQueryEx(System.IntPtr,System.IntPtr,Sharlayan.UnsafeNativeMethods.MEMORY_BASIC_INFORMATION@,System.UInt32)">
            <summary>
            </summary>
            <param name="processHandle"> </param>
            <param name="lpBaseAddress"> </param>
            <param name="lpBuffer"> </param>
            <param name="dwLength"> </param>
            <returns> </returns>
        </member>
    </members>
</doc>
